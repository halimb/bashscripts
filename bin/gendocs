#!/bin/bash

printHelp () {
	cat <<HELP



HELP
}

[[ $# -ne 2 ]] && printHelp && printf "\nError: incorrect number of arguments $#\n" && exit 1

declare -a componentsList=
declare -a modulesList=
declare -a emplibList=
declare -a docsets=("components" "modules" "emplib")

declare -A sourcePaths=([components]="components" [modules]="modules" [emplib]="libraries/emploitic")
declare -A prefs=([components]="com_" [modules]="mod_" [emplib]="${sourcePaths[emplib]}")
declare -A finalDocsList=([components]=${componentsList} [modules]=${modulesList} [emplibs]=${emplibList})

main=$1
mkdocsdir=$2

prefix=
subdir=
yaml="${mkdocsdir}/mkdocs.yml"

# returns a emplib, component or module subdirectory name stripped from its prefix
# params: $1: emplib, component or module directory pathname
strip () {
	subdir=$1

	# get the basename of the subdirectory
	subdir=$(basename $subdir) 
	
	# if any, remove the 'com_' or 'mod_' prefix
	[[ $prefix ]] && subdir=${subdir##*"$prefix"} 
}

# get a list of relevant subdirectories to document for each of:
# (modules || components || emploitic)
getSubdirs () {
	for d in ${docsets[@]}; do
		# init temp array
		tempArr=
		printf "docset => ${d}\n"
		# set the prefix and target directory
		prefix=${prefs[$d]}
		target="${main}/${sourcePaths[$d]}"

		# get subdirectories of target dir
		subdirectories=($(ls -d ${target}/*/))
		
		# get the stripped names of target's 
		# subdirectories and store them in tempArr
		for sd in ${subdirectories[@]}; do
			printf "\t${sd}"
			strip $sd
			tempArr+=" $subdir";
			printf "%25s\n" "=>    ${subdir}"
		done
		printf "\n"

		# Store tempArr into the corresponding docset
		case $d in
			modules)
				modulesList=$tempArr
				;;
			components)
				componentsList=$tempArr
				;;
			emplib)
				emplibList=$tempArr
				;;
		esac;
	done
}

getSubdirs

for el in ${emplibList[@]}; do 
	echo $el;
done

createMarkdowns() {
	for d in ${docsets[@]}; do

		# init destination to mkdocs' docs folder and reset docsArray
		destination="${mkdocsdir}/docs"
		docsArray=

		# append the corresponding subfolder name
		# to destination and set docsArray
		case "$d" in
			modules)
				destination+="/modules"
				docsArray=$modulesList
				section="Modules"
				;;
			components)
				destination+="/components"
				docsArray=$componentsList
				section="Components"
				;;
			emplib)
				destination+="/emplib"
				docsArray=$emplibList
				section="Emploitic library"
				;;
		esac

		# if the destination directory exists, 
		# create a md file  for each doc in docsArray, 
		# else print error message end exit with status 1
		if [[ -e "$destination" ]]; then
			count=0

			# add the section name to the mkdocs YAML
			printf "\n    - %s:" "${section}" >> "${yaml}"

			for docname in ${docsArray[@]}; do 
				((count++))
				# get the coplete pathname for the file
				filename="${destination}/${docname}.md"
				
				# create the file if it doesn't exist, else, print out an error message
				if [[ -e "$filename" ]]; then
					printf "\nWarning: failed to create markdown \"%s.md\" in %s\n" "$docname" "$destination" >&2
				else
					touch "$filename"
					printf "created markdown %s in %20s\n" "$filename" "$destination" 
				fi
				printf "\n      - %s.md" "${destination##*/}/${docname}" >> "${yaml}"
			done
			printf "array size for ${d} = %s" "${count}"
		else
			printf "\nError: the specified mkdocs directory: %s doesn't exist!\n" "$destination"
			exit 1
		fi
	done
}

createMarkdowns

exit 0
