#!/bin/bash

printHelp () {
	cat <<HELP

gendocs [emploiticdir] [mkdocsdir]

generate markdown documentation files for emploitic.

	emploiticdir: the pathname to emploitic source code directory.
	mkdocsdir: the pathname to the mkdocs documentation project directory.

HELP
}

[[ $# -ne 2 ]] && printHelp && printf "\nError: incorrect number of arguments $#\n" && exit 1

declare -a componentsList=
declare -a modulesList=
declare -a emplibList=
declare -a docsets=("components" "modules" "emplib")

declare -A prefs=([components]="com_" [modules]="mod_" [emplib]="${paths[emplib]}")
declare -A paths=([components]="components" [modules]="modules" [emplib]="libraries/emploitic")
declare -A finalDocsList=([components]=${componentsList} [modules]=${modulesList} [emplibs]=${emplibList})

main=$1
docs=$2

prefix=
subdir=

# returns a emplib, component or module subdirectory name stripped from its prefix
# params: $1: emplib, component or module directory pathname
strip () {
	subdir=$1

	# get the basename of the subdirectory
	subdir=$(basename $subdir) 
	
	# if any, remove the 'com_' or 'mod_' prefix
	[[ $prefix ]] && subdir=${subdir##*"$prefix"} 
}

# get a list of relevant subdirectories to document for each of:
# (modules || components || emploitic)
getSubdirs () {
	tempArr=
	for d in ${docsets[@]}; do
		printf "docset => ${d}\n"
		# set the prefix and target directory
		prefix=${prefs[$d]}
		target="${main}/${paths[$d]}"

		# get subdirectories of target dir
		subdirectories=($(ls -d ${target}/*/))
		
		# get the stripped names of target's 
		# subdirectories and store them in tempArr
		for sd in ${subdirectories[@]}; do
			printf "\t${sd}"
			strip $sd
			tempArr+=" $subdir";
			printf "%25s\n" "=>    ${subdir}"
		done
		printf "\n"

		# Store tempArr into the corresponding docset
		case $d in
			modules)
				modulesList=$tempArr
				;;
			components)
				componentsList=$tempArr
				;;
			emplib)
				emplibList=$tempArr
				;;
		esac;
	done
}

getSubdirs

for el in ${emplibList[@]}; do 
	echo $el;
done

exit 0
